std:
let
    obj = name: deps: {
        crate_name = "lrs_" ++ name,
        path = "src/\{name}/lib.rs",
        type = "lib",
        inherit name deps,
    };

    cfg = c: std.contains std.cfgs c;

    freestanding = cfg "freestanding";
    no_libc = cfg "no_libc" || freestanding;

    hobj = name: deps: if freestanding then null else obj name deps;
    cobj = name: deps: if no_libc then null else obj name deps;

    hdep = deps: if freestanding then [] else deps;
    cdep = deps: if no_libc then [] else deps;

    objs = rec {
        core = obj "core" [],
        cfg = obj "cfg" [core],
        libc = cobj "libc" [core],
        int = obj "int" [core],
        saturating = obj "saturating" [core],
        wrapping = obj "wrapping" [core],
        cty_base = obj "cty_base" [core],
        arch_fns = obj "arch_fns" ([core, cty_base] ++ cdep [libc]),
        base = obj "base" [core, cty_base, wrapping],
        iter = obj "iter" [core, base],
        slice = obj "slice" [core, base],
        hash = obj "hash" [core, base, wrapping],
        rv = obj "rv" [core, base, int],
        parse = obj "parse" [core, base],
        io = obj "io" [core, base, arch_fns],
        fmt = obj "fmt" [core, base, io],
        cell = obj "cell" [core, base],
        tree = obj "tree" [core, base, cell, fmt],
        str_one = obj "str_one" [core, cty_base, base, arch_fns, fmt, parse],
        getopt = obj "getopt" [core, base, str_one],
        atomic = obj "atomic" [core, base, cell],
        cty = obj "cty" [core, base, cty_base],
        varargs = cobj "varargs" [core, cty],
        r_syscall = hobj "r_syscall" [core, cty],
        syscall = hobj "syscall" [core, saturating, base, str_one, cty, r_syscall,
                                  atomic],
        kernel = hobj "kernel" [core, base, atomic, cty, syscall, parse, arch_fns],
        lock = obj "lock" ([core, base, cell, io, fmt, atomic, cty, time_base,
                            arch_fns] ++ hdep [syscall]),
        rt = hobj "rt" ([core, base, str_one, r_syscall, syscall, cty, atomic, lock]
                            ++ cdep [libc]),
        clone = hobj "clone" ([core, base, cty, syscall, fmt, r_syscall] ++ cdep [libc]),
        fd = hobj "fd" [core, base, rv, io, cty, syscall, fmt],
        mem = hobj "mem" [core, base, cty, fmt, syscall, fd],
        time_base = obj "time_base" ([core, base, cty, fmt, rv] ++ hdep [syscall, fd]),
        event = hobj "event" [core, base, cty, fmt, syscall, fd, io],
        signal = hobj "signal" [core, base, cty, fmt, syscall, fd, rv, time_base],
        thread = hobj "thread" ([core, base, syscall, cty, lock, fmt, time_base, iter,
                                 clone, fd, rt, mem, atomic, signal] ++ cdep [libc]),
        pipe = hobj "pipe" [core, base, cty, fmt, syscall, fd, rv, io, saturating],
        tlalc = hobj "tlalc" [base, cty, syscall, thread, arch_fns],
        alloc = obj "alloc" ([core, base, cty] ++ cdep [libc] ++ hdep [syscall, tlalc]),
        queue = hobj "queue" [core, base, cell, arch_fns, atomic, lock, alloc],
        box = obj "box" [core, base, alloc, fmt],
        c_ptr_ptr = obj "c_ptr_ptr" [core, base, cty_base, str_one, alloc],
        buf_reader = obj "buf_reader" [core, arch_fns, base, io, alloc, str_one],
        rc = obj "rc" [core, base, fmt, cell, alloc, atomic],
        vec = obj "vec" [core, base, str_one, io, fmt, alloc, box],
        ringbuf = obj "ringbuf" [core, base, fmt, alloc, wrapping],
        hashmap = obj "hashmap" [core, base, alloc, hash, fmt],
        str_two = obj "str_two" [core, arch_fns, base, str_one, fmt, vec, alloc, box],
        rmo = obj "rmo" [core, base, fmt, str_one, vec, str_two, alloc, arch_fns],
        swap = hobj "swap" [core, base, cty, syscall, fmt, alloc, rmo, str_one, str_two],
        inotify = hobj "inotify" [core, base, cty, fmt, syscall, fd, rv, io, str_one,
                                  alloc, rmo, str_two],
        env = hobj "env" [core, base, str_one, rt, syscall, alloc, str_two, cty, rmo, vec],
        fs = hobj "fs" [core, base, fmt, cty, syscall, rv, alloc, rmo, str_one, str_two],
        socket = hobj "socket" [core, base, cty, arch_fns, str_one, fmt, syscall, rv, fd,
                                io, saturating, time_base, alloc],
        netlink = hobj "netlink" [core, base, cty, vec, alloc, fmt],
        sys = hobj "sys" [core, base, fmt, cty, syscall, str_one, rv, time_base, rmo,
                          alloc, str_two],
        poll = hobj "poll" [core, base, cty, syscall, fd, rv, saturating, fmt, time_base],
        dev = hobj "dev" [core, base, fmt, cty],
        file = hobj "file" [core, base, io, cty, fmt, int, syscall, str_one, str_two,
                            arch_fns, rv, parse, fd, dev, fs, time_base, vec, rmo, cell],
        mqueue = hobj "mqueue" [core, base, cty, fmt, syscall, fd, file, rmo, alloc,
                                time_base, rv, str_one, str_two],
        tty = hobj "tty" [core, base, syscall, cty, fd, file, signal, dev, fmt],
        process = hobj "process" [core, base, syscall, cty, fmt, str_one, str_two,
                                  c_ptr_ptr, alloc, rt, env, file, rmo, rv, time_base],
        time_ext = obj "time_ext" ([core, base, fmt, str_one, time_base, io, vec]
                                        ++ hdep [file]),
        dir = hobj "dir" [core, base, cty, str_one, str_two, syscall, fd, fmt, file, vec,
                          rmo, alloc],
        rand = obj "rand" ([core, base, io, fmt] ++ hdep [cty, syscall, rv, kernel, file]),
        // user_group = hobj "user_group" [core, base, arch_fns, io, buf_reader, fmt,
        //                                 str_one, str_two, cty, parse, file, vec, rmo,
        //                                 iter, alloc],
    };

    lrs = {
        crate_name = "lrs",
        path = "src/lrs/lib.rs",
        name = "lrs",
        type = "lib",
        deps = std.filter (std.to_list objs) o: o != null,
    };

    libtest = {
        crate_name = "test",
        path = "src/test/lib.rs",
        name = "libtest",
        type = "lib",
        deps = [lrs],
    };

    default_target = if freestanding then lrs else libtest;

    not_null = val: alt: if val != null then val else alt;

    target = if std.path ? 1 && std.path.0 == "src" && objs ? (std.path.1) then
        not_null objs.(std.path.1) default_target
    else
        default_target;

    ccfg = c: cfg: if c then [cfg] else [];

in
    {
        cfgs = ccfg no_libc "no_libc" ++
               ccfg freestanding "freestanding" ++
               std.cfgs,
        inherit target,
    }
